cargo : warning: unused variable: `component`
At line:1 char:1
+ cargo run --package logisim_ui --features gui 2>&1 | Tee-Object -File ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (warning: unused variable: `component`:String) [], RemoteException
    + FullyQualifiedErrorId : NativeCommandError
 
   --> logisim_core\src\tools\add_tool.rs:130:21
    |
130 |                 for component in circuit.get_all_components() {
    |                     ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_component`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `location`
   --> logisim_core\src\tools\add_tool.rs:124:54
    |
124 |     fn is_valid_location(&self, canvas: &dyn Canvas, location: Location) -> bool {
    |                                                      ^^^^^^^^ help: if this is intentional, prefix it with an 
underscore: `_location`

warning: unused variable: `location`
   --> logisim_core\src\tools\add_tool.rs:139:29
    |
139 |     fn get_bounds_at(&self, location: Location) -> Option<Bounds> {
    |                             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_location`

warning: unused variable: `component`
   --> logisim_core\src\tools\add_tool.rs:164:13
    |
164 |         let component = self.create_component_at(event.location);
    |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_component`

warning: unused variable: `project`
   --> logisim_core\src\tools\add_tool.rs:167:25
    |
167 |         if let Some(mut project) = canvas.get_project() {
    |                         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_project`

warning: variable does not need to be mutable
   --> logisim_core\src\tools\add_tool.rs:167:21
    |
167 |         if let Some(mut project) = canvas.get_project() {
    |                     ----^^^^^^^
    |                     |
    |                     help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `canvas`
   --> logisim_core\src\tools\add_tool.rs:259:20
    |
259 |     fn draw(&self, canvas: &dyn Canvas, context: &ComponentDrawContext) {
    |                    ^^^^^^ help: if this is intentional, prefix it with an underscore: `_canvas`

warning: unused variable: `context`
   --> logisim_core\src\tools\add_tool.rs:259:41
    |
259 |     fn draw(&self, canvas: &dyn Canvas, context: &ComponentDrawContext) {
    |                                         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning: unused variable: `component`
   --> logisim_core\src\tools\select_tool.rs:114:21
    |
114 |                 for component in circuit.get_all_components() {
    |                     ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_component`

warning: unused variable: `location`
   --> logisim_core\src\tools\select_tool.rs:110:54
    |
110 |     fn find_component_at(&self, canvas: &dyn Canvas, location: Location) -> Option<ComponentId> {
    |                                                      ^^^^^^^^ help: if this is intentional, prefix it with an 
underscore: `_location`

warning: unused variable: `selection_bounds`
   --> logisim_core\src\tools\select_tool.rs:134:21
    |
134 |                 let selection_bounds = Bounds::from_locations(start, end);
    |                     ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_selection_bounds`

warning: unused variable: `component`
   --> logisim_core\src\tools\select_tool.rs:136:21
    |
136 |                 for component in circuit.get_all_components() {
    |                     ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_component`

warning: variable does not need to be mutable
   --> logisim_core\src\tools\select_tool.rs:130:13
    |
130 |         let mut components = Vec::new();
    |             ----^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `canvas`
   --> logisim_core\src\tools\select_tool.rs:179:30
    |
179 |     fn start_move(&mut self, canvas: &dyn Canvas, event: &MouseEvent) {
    |                              ^^^^^^ help: if this is intentional, prefix it with an underscore: `_canvas`

warning: unused variable: `canvas`
   --> logisim_core\src\tools\select_tool.rs:217:33
    |
217 |     fn complete_move(&mut self, canvas: &dyn Canvas) {
    |                                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_canvas`

warning: unused variable: `start`
   --> logisim_core\src\tools\select_tool.rs:275:30
    |
275 |                 if let Some((start, end)) = self.selection_rect {
    |                              ^^^^^ help: if this is intentional, prefix it with an underscore: `_start`

warning: unused variable: `end`
   --> logisim_core\src\tools\select_tool.rs:275:37
    |
275 |                 if let Some((start, end)) = self.selection_rect {
    |                                     ^^^ help: if this is intentional, prefix it with an underscore: `_end`

warning: unused variable: `canvas`
   --> logisim_core\src\tools\select_tool.rs:267:20
    |
267 |     fn draw(&self, canvas: &dyn Canvas, context: &ComponentDrawContext) {
    |                    ^^^^^^ help: if this is intentional, prefix it with an underscore: `_canvas`

warning: unused variable: `context`
   --> logisim_core\src\tools\select_tool.rs:267:41
    |
267 |     fn draw(&self, canvas: &dyn Canvas, context: &ComponentDrawContext) {
    |                                         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning: unused variable: `canvas`
   --> logisim_core\src\tools\select_tool.rs:343:31
    |
343 |     fn key_pressed(&mut self, canvas: &dyn Canvas, event: &KeyEvent) {
    |                               ^^^^^^ help: if this is intentional, prefix it with an underscore: `_canvas`

warning: unused variable: `event`
   --> logisim_core\src\tools\select_tool.rs:343:52
    |
343 |     fn key_pressed(&mut self, canvas: &dyn Canvas, event: &KeyEvent) {
    |                                                    ^^^^^ help: if this is intentional, prefix it with an underscore: 
`_event`

warning: unused variable: `canvas`
   --> logisim_core\src\tools\select_tool.rs:351:26
    |
351 |     fn select(&mut self, canvas: &dyn Canvas) {
    |                          ^^^^^^ help: if this is intentional, prefix it with an underscore: `_canvas`

warning: unused variable: `canvas`
   --> logisim_core\src\tools\select_tool.rs:355:28
    |
355 |     fn deselect(&mut self, canvas: &dyn Canvas) {
    |                            ^^^^^^ help: if this is intentional, prefix it with an underscore: `_canvas`

warning: unused variable: `component`
   --> logisim_core\src\tools\wiring_tool.rs:202:21
    |
202 |                 for component in circuit.get_all_components() {
    |                     ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_component`

warning: unused variable: `location`
   --> logisim_core\src\tools\wiring_tool.rs:196:59
    |
196 |     fn find_connection_points(&self, canvas: &dyn Canvas, location: Location) -> Vec<Location> {
    |                                                           ^^^^^^^^ help: if this is intentional, prefix it with an 
underscore: `_location`

warning: variable does not need to be mutable
   --> logisim_core\src\tools\wiring_tool.rs:197:13
    |
197 |         let mut points = Vec::new();
    |             ----^^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `canvas`
   --> logisim_core\src\tools\wiring_tool.rs:215:41
    |
215 |     fn is_valid_connection_point(&self, canvas: &dyn Canvas, location: Location) -> bool {
    |                                         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_canvas`

warning: unused variable: `location`
   --> logisim_core\src\tools\wiring_tool.rs:215:62
    |
215 |     fn is_valid_connection_point(&self, canvas: &dyn Canvas, location: Location) -> bool {
    |                                                              ^^^^^^^^ help: if this is intentional, prefix it with an 
underscore: `_location`

warning: unused variable: `project`
   --> logisim_core\src\tools\wiring_tool.rs:258:29
    |
258 |                 if let Some(project) = canvas.get_project() {
    |                             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_project`

warning: unused variable: `canvas`
   --> logisim_core\src\tools\wiring_tool.rs:281:33
    |
281 |     fn check_wire_repair(&self, canvas: &dyn Canvas, location: Location) -> Option<WireRepairInfo> {
    |                                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_canvas`

warning: unused variable: `location`
   --> logisim_core\src\tools\wiring_tool.rs:281:54
    |
281 |     fn check_wire_repair(&self, canvas: &dyn Canvas, location: Location) -> Option<WireRepairInfo> {
    |                                                      ^^^^^^^^ help: if this is intentional, prefix it with an 
underscore: `_location`

warning: unused variable: `canvas`
   --> logisim_core\src\tools\wiring_tool.rs:317:20
    |
317 |     fn draw(&self, canvas: &dyn Canvas, context: &ComponentDrawContext) {
    |                    ^^^^^^ help: if this is intentional, prefix it with an underscore: `_canvas`

warning: unused variable: `context`
   --> logisim_core\src\tools\wiring_tool.rs:317:41
    |
317 |     fn draw(&self, canvas: &dyn Canvas, context: &ComponentDrawContext) {
    |                                         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_context`

warning: unused variable: `canvas`
   --> logisim_core\src\tools\wiring_tool.rs:387:33
    |
387 |     fn mouse_entered(&mut self, canvas: &dyn Canvas, event: &MouseEvent) {
    |                                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_canvas`

warning: unused variable: `canvas`
   --> logisim_core\src\tools\wiring_tool.rs:400:31
    |
400 |     fn key_pressed(&mut self, canvas: &dyn Canvas, event: &KeyEvent) {
    |                               ^^^^^^ help: if this is intentional, prefix it with an underscore: `_canvas`

warning: unused variable: `event`
   --> logisim_core\src\tools\wiring_tool.rs:400:52
    |
400 |     fn key_pressed(&mut self, canvas: &dyn Canvas, event: &KeyEvent) {
    |                                                    ^^^^^ help: if this is intentional, prefix it with an underscore: 
`_event`

warning: type `WireSegment` is more private than the item `AddWireAction::new`
   --> logisim_core\src\tools\wiring_tool.rs:445:5
    |
445 |     pub fn new(wire_segment: WireSegment) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ associated function `AddWireAction::new` is reachable at visibility 
`pub`
    |
note: but type `WireSegment` is only usable at visibility `pub(self)`
   --> logisim_core\src\tools\wiring_tool.rs:52:1
    |
 52 | struct WireSegment {
    | ^^^^^^^^^^^^^^^^^^
    = note: `#[warn(private_interfaces)]` on by default

warning: associated items `LINE_PATTERN` and `get_line_end_index` are never used
   --> logisim_core\src\hdl\parsers\vhdl.rs:44:11
    |
 42 | impl VhdlParser {
    | --------------- associated items in this implementation
 43 |     // Pattern constants equivalent to Java
 44 |     const LINE_PATTERN: &'static str = r":\s*(\w+)\s+std_logic";
    |           ^^^^^^^^^^^^
...
237 |     fn get_line_end_index(&self, input: &str, from: usize) -> usize {
    |        ^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: field `id` is never read
  --> logisim_core\src\std\base\base_library.rs:22:5
   |
21 | pub struct BaseLibrary {
   |            ----------- field in this struct
22 |     id: String,
   |     ^^

warning: field `id` is never read
  --> logisim_core\src\std\gates\gates_library.rs:23:5
   |
22 | pub struct GatesLibrary {
   |            ------------ field in this struct
23 |     id: String,
   |     ^^

warning: method `get_bounds_at` is never used
   --> logisim_core\src\tools\add_tool.rs:139:8
    |
 76 | impl AddTool {
    | ------------ method in this implementation
...
139 |     fn get_bounds_at(&self, location: Location) -> Option<Bounds> {
    |        ^^^^^^^^^^^^^

warning: fields `component`, `location`, and `circuit_id` are never read
   --> logisim_core\src\tools\add_tool.rs:343:5
    |
342 | pub struct AddComponentAction {
    |            ------------------ fields in this struct
343 |     component: Box<dyn Component>,
    |     ^^^^^^^^^
344 |     location: Location,
    |     ^^^^^^^^
345 |     circuit_id: Option<String>, // Circuit identifier
    |     ^^^^^^^^^^

warning: field `draw_connections` is never read
  --> logisim_core\src\tools\select_tool.rs:72:5
   |
60 | pub struct SelectTool {
   |            ---------- field in this struct
...
72 |     draw_connections: bool,
   |     ^^^^^^^^^^^^^^^^

warning: variant `Repairing` is never constructed
  --> logisim_core\src\tools\wiring_tool.rs:47:5
   |
41 | enum WiringState {
   |      ----------- variant in this enum
...
47 |     Repairing,
   |     ^^^^^^^^^
   |
   = note: `WiringState` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during 
dead code analysis

warning: field `width` is never read
  --> logisim_core\src\tools\wiring_tool.rs:60:5
   |
52 | struct WireSegment {
   |        ----------- field in this struct
...
60 |     width: i32,
   |     ^^^^^
   |
   = note: `WireSegment` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during 
dead code analysis

warning: methods `length`, `is_horizontal`, and `is_vertical` are never used
   --> logisim_core\src\tools\wiring_tool.rs:131:8
    |
 63 | impl WireSegment {
    | ---------------- methods in this implementation
...
131 |     fn length(&self) -> i32 {
    |        ^^^^^^
...
143 |     fn is_horizontal(&self) -> bool {
    |        ^^^^^^^^^^^^^
...
148 |     fn is_vertical(&self) -> bool {
    |        ^^^^^^^^^^^

warning: associated items `MIN_REPAIR_LENGTH`, `find_connection_points`, and `check_wire_repair` are never used
   --> logisim_core\src\tools\wiring_tool.rs:182:11
    |
177 | impl WiringTool {
    | --------------- associated items in this implementation
...
182 |     const MIN_REPAIR_LENGTH: i32 = 10;
    |           ^^^^^^^^^^^^^^^^^
...
196 |     fn find_connection_points(&self, canvas: &dyn Canvas, location: Location) -> Vec<Location> {
    |        ^^^^^^^^^^^^^^^^^^^^^^
...
281 |     fn check_wire_repair(&self, canvas: &dyn Canvas, location: Location) -> Option<WireRepairInfo> {
    |        ^^^^^^^^^^^^^^^^^

warning: struct `WireRepairInfo` is never constructed
   --> logisim_core\src\tools\wiring_tool.rs:427:8
    |
427 | struct WireRepairInfo {
    |        ^^^^^^^^^^^^^^

warning: fields `wire_segment` and `circuit_id` are never read
   --> logisim_core\src\tools\wiring_tool.rs:440:5
    |
439 | pub struct AddWireAction {
    |            ------------- fields in this struct
440 |     wire_segment: WireSegment,
    |     ^^^^^^^^^^^^
441 |     circuit_id: Option<String>,
    |     ^^^^^^^^^^

warning: `logisim_core` (lib) generated 49 warnings (run `cargo fix --lib -p logisim_core` to apply 3 suggestions)
   Compiling logisim_ui v1.0.0 (C:\Users\tooel\git\Logisim-RUST\Logisim-Rust\logisim_ui)
warning: unused import: `Simulation`
 --> logisim_ui\src\gui\app.rs:6:50
  |
6 | use logisim_core::{circ_format::CircIntegration, Simulation};
  |                                                  ^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `prefs::AppPreferences`
 --> logisim_ui\src\gui\startup.rs:7:43
  |
7 | use logisim_core::{build_info::BuildInfo, prefs::AppPreferences};
  |                                           ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `logisim_core::ComponentId`
 --> logisim_ui\src\gui\toolbar.rs:2:5
  |
2 | use logisim_core::ComponentId;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `HALO_COLOR` and `snap_to_grid`
 --> logisim_ui\src\gui\canvas.rs:3:54
  |
3 | use super::common::{default_stroke, selected_stroke, snap_to_grid, GRID_SIZE, HALO_COLOR};
  |                                                      ^^^^^^^^^^^^             ^^^^^^^^^^

warning: unused import: `Value`
 --> logisim_ui\src\gui\chronogram\model.rs:8:43
  |
8 |     signal::{BusWidth, Signal, Timestamp, Value},
  |                                           ^^^^^

warning: unused import: `Vec2`
 --> logisim_ui\src\gui\chronogram\timeline.rs:7:62
  |
7 | use egui::{Color32, Pos2, Rect, Response, Sense, Stroke, Ui, Vec2};
  |                                                              ^^^^

warning: unused import: `Vec2`
 --> logisim_ui\src\gui\chronogram\waveform.rs:7:62
  |
7 | use egui::{Color32, Pos2, Rect, Response, Sense, Stroke, Ui, Vec2};
  |                                                              ^^^^

warning: unused import: `self`
 --> logisim_ui\src\gui\project_explorer.rs:3:20
  |
3 | use eframe::egui::{self, CollapsingHeader, Ui};
  |                    ^^^^

warning: unused import: `self`
 --> logisim_ui\src\gui\toolbox.rs:3:20
  |
3 | use eframe::egui::{self, CollapsingHeader, Ui};
  |                    ^^^^

warning: unused import: `Stroke`
  --> logisim_ui\src\hex\caret.rs:19:62
   |
19 | use egui::{Color32, Key, Modifiers, Painter, Rect, Rounding, Stroke};
   |                                                              ^^^^^^

warning: unused import: `HexModelListener`
  --> logisim_ui\src\hex\hex_editor.rs:15:34
   |
15 | use super::hex_model::{HexModel, HexModelListener};
   |                                  ^^^^^^^^^^^^^^^^

warning: unused imports: `Context`, `Key`, `Modifiers`, `Stroke`, and `TextStyle`
  --> logisim_ui\src\hex\hex_editor.rs:21:14
   |
21 |     Color32, Context, FontId, Key, Modifiers, Painter, Pos2, Rect, Response, Rounding, ScrollArea,
   |              ^^^^^^^          ^^^  ^^^^^^^^^
22 |     Sense, Stroke, TextStyle, Ui, Vec2, Widget,
   |            ^^^^^^  ^^^^^^^^^

warning: unused import: `Stroke`
  --> logisim_ui\src\hex\highlighter.rs:18:46
   |
18 | use egui::{Color32, Painter, Rect, Rounding, Stroke};
   |                                              ^^^^^^

error[E0599]: no method named `values` found for reference `&Signal` in the current scope
   --> logisim_ui\src\gui\chronogram\waveform.rs:363:38
    |
363 |         for (i, bit_value) in signal.values().iter().enumerate() {
    |                                      ^^^^^^
    |
help: there is a method `value` with a similar name
    |
363 -         for (i, bit_value) in signal.values().iter().enumerate() {
363 +         for (i, bit_value) in signal.value().iter().enumerate() {
    |

error[E0599]: no method named `values` found for reference `&Signal` in the current scope
   --> logisim_ui\src\gui\chronogram\waveform.rs:383:23
    |
383 |             if signal.values().len() > 4 {
    |                       ^^^^^^
    |
help: there is a method `value` with a similar name
    |
383 -             if signal.values().len() > 4 {
383 +             if signal.value().len() > 4 {
    |

error[E0308]: mismatched types
  --> logisim_ui\src\hex\hex_editor.rs:82:33
   |
82 |         self.measures.recompute(self.get_model_ref().as_deref());
   |                       --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Option<&dyn HexModel>`, found 
`Option<&Mutex<dyn HexModel>>`
   |                       |
   |                       arguments to this method are incorrect
   |
   = note: expected enum `std::option::Option<&dyn HexModel>`
              found enum `std::option::Option<&std::sync::Mutex<(dyn HexModel + 'static)>>`
note: method defined here
  --> logisim_ui\src\hex\measures.rs:66:12
   |
66 |     pub fn recompute(&mut self, model: Option<&dyn HexModel>) {
   |            ^^^^^^^^^            ----------------------------

error[E0308]: mismatched types
  --> logisim_ui\src\hex\hex_editor.rs:95:33
   |
95 |         self.measures.recompute(self.get_model_ref().as_deref());
   |                       --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Option<&dyn HexModel>`, found 
`Option<&Mutex<dyn HexModel>>`
   |                       |
   |                       arguments to this method are incorrect
   |
   = note: expected enum `std::option::Option<&dyn HexModel>`
              found enum `std::option::Option<&std::sync::Mutex<(dyn HexModel + 'static)>>`
note: method defined here
  --> logisim_ui\src\hex\measures.rs:66:12
   |
66 |     pub fn recompute(&mut self, model: Option<&dyn HexModel>) {
   |            ^^^^^^^^^            ----------------------------

error[E0308]: mismatched types
   --> logisim_ui\src\hex\hex_editor.rs:107:33
    |
107 |         self.measures.recompute(self.get_model_ref().as_deref());
    |                       --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Option<&dyn HexModel>`, found 
`Option<&Mutex<dyn HexModel>>`
    |                       |
    |                       arguments to this method are incorrect
    |
    = note: expected enum `std::option::Option<&dyn HexModel>`
               found enum `std::option::Option<&std::sync::Mutex<(dyn HexModel + 'static)>>`
note: method defined here
   --> logisim_ui\src\hex\measures.rs:66:12
    |
 66 |     pub fn recompute(&mut self, model: Option<&dyn HexModel>) {
    |            ^^^^^^^^^            ----------------------------

error[E0308]: mismatched types
   --> logisim_ui\src\hex\hex_editor.rs:114:33
    |
114 |         self.measures.recompute(self.get_model_ref().as_deref());
    |                       --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Option<&dyn HexModel>`, found 
`Option<&Mutex<dyn HexModel>>`
    |                       |
    |                       arguments to this method are incorrect
    |
    = note: expected enum `std::option::Option<&dyn HexModel>`
               found enum `std::option::Option<&std::sync::Mutex<(dyn HexModel + 'static)>>`
note: method defined here
   --> logisim_ui\src\hex\measures.rs:66:12
    |
 66 |     pub fn recompute(&mut self, model: Option<&dyn HexModel>) {
    |            ^^^^^^^^^            ----------------------------

error[E0308]: mismatched types
   --> logisim_ui\src\hex\hex_editor.rs:121:37
    |
121 |             .add(start, end, color, self.get_model_ref().as_deref())
    |              ---                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Option<&dyn HexModel>`, found 
`Option<&Mutex<dyn HexModel>>`
    |              |
    |              arguments to this method are incorrect
    |
    = note: expected enum `std::option::Option<&dyn HexModel>`
               found enum `std::option::Option<&std::sync::Mutex<(dyn HexModel + 'static)>>`
note: method defined here
   --> logisim_ui\src\hex\highlighter.rs:49:12
    |
 49 |     pub fn add(
    |            ^^^
...
 54 |         model: Option<&dyn HexModel>,
    |         ----------------------------

error[E0308]: mismatched types
   --> logisim_ui\src\hex\hex_editor.rs:137:48
    |
137 |             .select_all(&mut self.highlighter, self.get_model_ref().as_deref());
    |              ----------                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Option<&dyn HexModel>`, 
found `Option<&Mutex<dyn HexModel>>`
    |              |
    |              arguments to this method are incorrect
    |
    = note: expected enum `std::option::Option<&dyn HexModel>`
               found enum `std::option::Option<&std::sync::Mutex<(dyn HexModel + 'static)>>`
note: method defined here
   --> logisim_ui\src\hex\caret.rs:272:12
    |
272 |     pub fn select_all(&mut self, highlighter: &mut Highlighter, model: Option<&dyn HexModel>) {
    |            ^^^^^^^^^^                                           ----------------------------

error[E0308]: mismatched types
   --> logisim_ui\src\hex\hex_editor.rs:156:13
    |
152 |         self.caret.set_dot(
    |                    ------- arguments to this method are incorrect
...
156 |             self.get_model_ref().as_deref(),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Option<&dyn HexModel>`, found `Option<&Mutex<dyn HexModel>>`
    |
    = note: expected enum `std::option::Option<&dyn HexModel>`
               found enum `std::option::Option<&std::sync::Mutex<(dyn HexModel + 'static)>>`
note: method defined here
   --> logisim_ui\src\hex\caret.rs:67:12
    |
 67 |     pub fn set_dot(
    |            ^^^^^^^
...
 72 |         model: Option<&dyn HexModel>,
    |         ----------------------------

error[E0505]: cannot move out of `app` because it is borrowed
   --> logisim_ui\src\gui\app.rs:122:18
    |
117 |     let app = LogisimApp::new();
    |         --- binding `app` declared here
118 |
119 |     eframe::run_native(
    |     ------------------ borrow later used by call
120 |         &app.title(),
    |          --- borrow of `app` occurs here
121 |         options,
122 |         Box::new(|_cc| {
    |                  ^^^^^ move out of `app` occurs here
...
128 |             Ok(Box::new(app))
    |                         --- move occurs due to use in closure
    |
note: if `LogisimApp` implemented `Clone`, you could clone the value
   --> logisim_ui\src\gui\app.rs:13:1
    |
 13 | pub struct LogisimApp {
    | ^^^^^^^^^^^^^^^^^^^^^ consider implementing `Clone` for this type
...
120 |         &app.title(),
    |          --- you could clone this value

error[E0505]: cannot move out of `app` because it is borrowed
   --> logisim_ui\src\gui\app.rs:152:18
    |
146 |     let mut app = LogisimApp::new();
    |         ------- binding `app` declared here
...
149 |     eframe::run_native(
    |     ------------------ borrow later used by call
150 |         &app.title(),
    |          --- borrow of `app` occurs here
151 |         options,
152 |         Box::new(move |_cc| Ok(Box::new(app))),
    |                  ^^^^^^^^^^             --- move occurs due to use in closure
    |                  |
    |                  move out of `app` occurs here
    |
note: if `LogisimApp` implemented `Clone`, you could clone the value
   --> logisim_ui\src\gui\app.rs:13:1
    |
 13 | pub struct LogisimApp {
    | ^^^^^^^^^^^^^^^^^^^^^ consider implementing `Clone` for this type
...
150 |         &app.title(),
    |          --- you could clone this value

error[E0505]: cannot move out of `app` because it is borrowed
   --> logisim_ui\src\gui\app.rs:186:18
    |
180 |     let mut app = LogisimApp::new();
    |         ------- binding `app` declared here
...
183 |     eframe::run_native(
    |     ------------------ borrow later used by call
184 |         &app.title(),
    |          --- borrow of `app` occurs here
185 |         options,
186 |         Box::new(move |_cc| Ok(Box::new(app))),
    |                  ^^^^^^^^^^             --- move occurs due to use in closure
    |                  |
    |                  move out of `app` occurs here
    |
note: if `LogisimApp` implemented `Clone`, you could clone the value
   --> logisim_ui\src\gui\app.rs:13:1
    |
 13 | pub struct LogisimApp {
    | ^^^^^^^^^^^^^^^^^^^^^ consider implementing `Clone` for this type
...
184 |         &app.title(),
    |          --- you could clone this value

warning: unused variable: `parent_component`
  --> logisim_ui\src\gui\generic\option_pane.rs:32:32
   |
32 |     pub fn show_message_dialog(parent_component: Option<&str>, message: &str) {
   |                                ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: 
`_parent_component`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `parent_component`
  --> logisim_ui\src\gui\generic\option_pane.rs:51:9
   |
51 |         parent_component: Option<&str>,
   |         ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_parent_component`

warning: unused variable: `parent_component`
  --> logisim_ui\src\gui\generic\option_pane.rs:79:9
   |
79 |         parent_component: Option<&str>,
   |         ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_parent_component`

warning: unused variable: `option_type`
  --> logisim_ui\src\gui\generic\option_pane.rs:82:9
   |
82 |         option_type: i32,
   |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_option_type`

warning: unused variable: `pos`
   --> logisim_ui\src\gui\canvas.rs:140:38
    |
140 |     fn select_at_position(&mut self, pos: Pos2) {
    |                                      ^^^ help: if this is intentional, prefix it with an underscore: `_pos`

warning: unused variable: `available_rect`
   --> logisim_ui\src\gui\chronogram\panel.rs:102:13
    |
102 |         let available_rect = ui.available_rect_before_wrap();
    |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_available_rect`

error[E0004]: non-exhaustive patterns: `logisim_core::Value::HighZ` not covered
   --> logisim_ui\src\gui\chronogram\waveform.rs:337:15
    |
337 |         match value {
    |               ^^^^^ pattern `logisim_core::Value::HighZ` not covered
    |
note: `logisim_core::Value` defined here
   --> C:\Users\tooel\git\Logisim-RUST\Logisim-Rust\logisim_core\src\signal.rs:90:1
    |
 90 | pub enum Value {
    | ^^^^^^^^^^^^^^
...
100 |     HighZ,
    |     ----- not covered
    = note: the matched value is of type `logisim_core::Value`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern 
as shown
    |
340 ~             Value::Unknown | Value::Error => (high_y + low_y) / 2.0,
341 ~             logisim_core::Value::HighZ => todo!(),
    |

error[E0004]: non-exhaustive patterns: `logisim_core::Value::HighZ` not covered
   --> logisim_ui\src\gui\chronogram\waveform.rs:346:15
    |
346 |         match value {
    |               ^^^^^ pattern `logisim_core::Value::HighZ` not covered
    |
note: `logisim_core::Value` defined here
   --> C:\Users\tooel\git\Logisim-RUST\Logisim-Rust\logisim_core\src\signal.rs:90:1
    |
 90 | pub enum Value {
    | ^^^^^^^^^^^^^^
...
100 |     HighZ,
    |     ----- not covered
    = note: the matched value is of type `logisim_core::Value`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern 
as shown
    |
350 ~             Value::Error => self.colors.error,
351 ~             logisim_core::Value::HighZ => todo!(),
    |

error[E0502]: cannot borrow `*self` as immutable because it is also borrowed as mutable
   --> logisim_ui\src\hex\hex_editor.rs:337:25
    |
332 |                     if self.caret.handle_key_input(
    |                                   ---------------- mutable borrow later used by call
...
336 |                         &mut self.highlighter,
    |                         --------------------- mutable borrow occurs here
337 |                         self.get_model_ref()
    |                         ^^^^ immutable borrow occurs here

error[E0502]: cannot borrow `*self` as immutable because it is also borrowed as mutable
   --> logisim_ui\src\hex\hex_editor.rs:358:21
    |
353 |                 self.caret.handle_mouse_click(
    |                            ------------------ mutable borrow later used by call
...
357 |                     &mut self.highlighter,
    |                     --------------------- mutable borrow occurs here
358 |                     self.get_model_ref()
    |                     ^^^^ immutable borrow occurs here

error[E0502]: cannot borrow `*self` as immutable because it is also borrowed as mutable
   --> logisim_ui\src\hex\hex_editor.rs:372:21
    |
368 |                 self.caret.handle_mouse_drag(
    |                            ----------------- mutable borrow later used by call
...
371 |                     &mut self.highlighter,
    |                     --------------------- mutable borrow occurs here
372 |                     self.get_model_ref()
    |                     ^^^^ immutable borrow occurs here

warning: unused variable: `model`
   --> logisim_ui\src\hex\measures.rs:163:35
    |
163 |     pub fn to_x(&self, addr: u64, model: Option<&dyn HexModel>) -> f32 {
    |                                   ^^^^^ help: if this is intentional, prefix it with an underscore: `_model`

warning: unused variable: `old_base_x`
   --> logisim_ui\src\hex\measures.rs:178:13
    |
178 |         let old_base_x = self.base_x;
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_old_base_x`

warning: variable does not need to be mutable
   --> logisim_ui\src\hex\measures.rs:223:21
    |
223 |                 let mut addr_end = model.get_last_offset();
    |                     ----^^^^^^^^
    |                     |
    |                     help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

Some errors have detailed explanations: E0004, E0308, E0502, E0505, E0599.
For more information about an error, try `rustc --explain E0004`.
warning: `logisim_ui` (lib) generated 22 warnings
error: could not compile `logisim_ui` (lib) due to 17 previous errors; 22 warnings emitted
