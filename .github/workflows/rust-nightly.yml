name: "Rust Nightly Tests"

on:
  schedule:
    # Run every day at 3:00 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:  # Allow manual triggering

env:
  CARGO_TERM_COLOR: always

jobs:
  nightly_test:
    name: "Test with Rust Nightly"
    runs-on: ${{ matrix.os }}
    continue-on-error: true  # Don't fail CI if nightly has issues
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: "Checkout sources"
      uses: actions/checkout@v5
    
    - name: "Install Rust nightly toolchain"
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: nightly
        components: rustfmt, clippy
    
    - name: "Cache Rust dependencies"
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        workspaces: "Logisim-Rust -> target"
    
    - name: "Check code formatting"
      run: cargo fmt --all -- --check
      working-directory: Logisim-Rust
    
    - name: "Run Clippy"
      run: cargo clippy --workspace --all-targets -- -D warnings
      working-directory: Logisim-Rust
    
    - name: "Build workspace"
      run: cargo build --verbose --workspace
      working-directory: Logisim-Rust
    
    - name: "Run tests"
      run: cargo test --verbose --workspace
      working-directory: Logisim-Rust
    
    - name: "Build documentation"
      run: cargo doc --verbose --workspace --no-deps
      working-directory: Logisim-Rust

  experimental_features:
    name: "Test Experimental Features"
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - name: "Checkout sources"
      uses: actions/checkout@v5
    
    - name: "Install Rust nightly toolchain"
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: nightly
    
    - name: "Cache Rust dependencies"
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "Logisim-Rust -> target"
    
    - name: "Test with unstable features"
      run: |
        # Test building with various unstable features
        # This helps us prepare for future Rust versions
        cargo build --workspace
        cargo test --workspace
      working-directory: Logisim-Rust
    
    - name: "Check for future incompatibilities"
      run: |
        # Run with future-incompat-report to catch upcoming breaking changes
        cargo check --future-incompat-report --workspace
      working-directory: Logisim-Rust