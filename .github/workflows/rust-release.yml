name: "Release & Package"

on:
  push:
    tags:
      - 'v*'
  release:
    types: [created]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  create_release:
    name: "Create Release"
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.VERSION }}
    
    steps:
    - name: "Checkout sources"
      uses: actions/checkout@v5
    
    - name: "Get version from tag"
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="v0.1.0-dev"
        fi
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "Version: ${VERSION}"
    
    - name: "Create Release"
      id: create_release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        name: "Logisim-RUST ${{ steps.get_version.outputs.VERSION }}"
        body: |
          ## Changes in ${{ steps.get_version.outputs.VERSION }}
          
          Please see CHANGES.md for detailed changelog.
          
          ## Downloads
          
          - **Windows**: Download the `.zip` package 
          - **macOS**: Download the `.dmg` package 
          - **Linux**: Download the `.AppImage` executable
          
          ## System Requirements
          
          - **Linux**: glibc 2.31+, X11 or Wayland display server
          - **Windows**: Windows 10 version 1903 or later
          - **macOS**: macOS 10.15 (Catalina) or later
          
          ## GPL-3.0 License Notice
          
          This software is licensed under the GNU General Public License v3.0.
          See LICENSE.md for full license text. Source code is available at:
          https://github.com/crossplatformdev/Logisim-RUST
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, 'alpha') || contains(steps.get_version.outputs.VERSION, 'beta') || contains(steps.get_version.outputs.VERSION, 'rc') }}
        generate_release_notes: true

  build_and_package:
    name: "Build & Package"
    needs: [create_release]
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: logisim-rust
            artifact_extension: ''
            package_type: appimage
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: logisim-rust.exe
            artifact_extension: '.exe'
            package_type: installer
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: logisim-rust
            artifact_extension: ''
            package_type: dmg
    
    steps:
    - name: "Checkout sources"
      uses: actions/checkout@v5
    
    - name: "Install Rust toolchain"
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
        components: rustfmt, clippy
    
    - name: "Cache Rust dependencies"
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}
    
    # Install platform-specific dependencies
    - name: "Install Linux dependencies"
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev
        # For AppImage creation
        sudo apt-get install -y fuse3 libfuse2
    
    - name: "Install macOS dependencies"
      if: matrix.os == 'macos-latest'
      run: |
        brew install create-dmg
    
    - name: "Install Windows dependencies"
      if: matrix.os == 'windows-latest'
      run: |
        # Install WiX for MSI creation (if needed)
        # choco install wixtoolset
        echo "Windows dependencies installed"
    
    # Build the project
    - name: "Build release binary"
      run: |
        cargo build --release --target ${{ matrix.target }} --features gui --package logisim_ui --bin logisim-rust
    
    # Create packages
    - name: "Package for Linux (AppImage)"
      if: matrix.package_type == 'appimage'
      run: |
        mkdir -p AppDir/usr/bin
        cp target/${{ matrix.target }}/release/logisim-rust AppDir/usr/bin/logisim-rust
        
        # Create AppImage metadata
        cat > AppDir/logisim-rust.desktop << EOF
        [Desktop Entry]
        Name=Logisim-RUST
        Exec=logisim-rust
        Icon=logisim-rust
        Type=Application
        Categories=Education;Engineering;Electronics;
        Comment=Digital logic design tool and simulator
        EOF
        
        # Create a simple icon (placeholder)
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        # Create a simple SVG icon as placeholder
        cat > AppDir/usr/share/icons/hicolor/256x256/apps/logisim-rust.svg << 'EOF'
        <svg width="256" height="256" xmlns="http://www.w3.org/2000/svg">
          <rect width="256" height="256" fill="#2e3440"/>
          <circle cx="128" cy="128" r="80" fill="#5e81ac"/>
          <text x="128" y="140" text-anchor="middle" fill="white" font-size="24" font-family="Arial">LR</text>
        </svg>
        EOF
        
        # Download and run AppImage tool
        wget -O appimage-tool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimage-tool
        ./appimage-tool AppDir logisim-rust-${{ needs.create_release.outputs.version }}-linux-x86_64.AppImage
    
    - name: "Package for macOS (DMG)"
      if: matrix.package_type == 'dmg'
      run: |
        mkdir -p dist
        cp target/${{ matrix.target }}/release/logisim-rust dist/Logisim-RUST
        create-dmg \
          --volname "Logisim-RUST" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --app-drop-link 600 185 \
          "logisim-rust-${{ needs.create_release.outputs.version }}-macos-x86_64.dmg" \
          "dist/"
    
    - name: "Package for Windows (ZIP)"
      if: matrix.package_type == 'installer'
      run: |
        mkdir dist
        copy "target\\${{ matrix.target }}\\release\\logisim-rust.exe" "dist\\logisim-rust.exe"
        # Create a simple batch wrapper
        echo '@echo off' > dist/logisim-rust.bat
        echo 'start "" "%~dp0logisim-rust.exe" %*' >> dist/logisim-rust.bat
        # Add README
        echo 'Logisim-RUST - Digital Logic Design Tool' > dist/README.txt
        echo '' >> dist/README.txt
        echo 'Run logisim-rust.exe to start the application.' >> dist/README.txt
        echo 'Or use logisim-rust.bat for a wrapper script.' >> dist/README.txt
        echo '' >> dist/README.txt
        echo 'Licensed under GPL-3.0. See https://github.com/crossplatformdev/Logisim-RUST' >> dist/README.txt
        # Package as ZIP
        powershell Compress-Archive -Path dist\\* -DestinationPath logisim-rust-${{ needs.create_release.outputs.version }}-windows-x86_64.zip
    
    # Upload artifacts
    - name: "Upload Linux AppImage"
      if: matrix.package_type == 'appimage' && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: logisim-rust-${{ needs.create_release.outputs.version }}-linux-x86_64.AppImage
    
    - name: "Upload macOS DMG"
      if: matrix.package_type == 'dmg' && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: logisim-rust-${{ needs.create_release.outputs.version }}-macos-x86_64.dmg
    
    - name: "Upload Windows ZIP"
      if: matrix.package_type == 'installer' && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: logisim-rust-${{ needs.create_release.outputs.version }}-windows-x86_64.zip

  license_compliance:
    name: "GPL-3.0 License Compliance Check"
    runs-on: ubuntu-latest
    
    steps:
    - name: "Checkout sources"
      uses: actions/checkout@v5
    
    - name: "Check LICENSE.md exists"
      run: |
        if [ ! -f LICENSE.md ]; then
          echo "ERROR: LICENSE.md file is missing"
          exit 1
        fi
        echo "LICENSE.md found"
    
    - name: "Verify GPL-3.0 license content"
      run: |
        if ! grep -q "GNU GENERAL PUBLIC LICENSE" LICENSE.md; then
          echo "ERROR: LICENSE.md does not contain GPL license"
          exit 1
        fi
        if ! grep -q "Version 3" LICENSE.md; then
          echo "ERROR: LICENSE.md is not GPL version 3"
          exit 1
        fi
        echo "GPL-3.0 license verified"
    
    - name: "Check source file headers"
      run: |
        # Check that Rust source files contain license headers or references
        find . -name "*.rs" -not -path "./target/*" | head -10 | while read file; do
          if ! grep -q -i "GPL\|license\|copyright" "$file"; then
            echo "WARNING: $file may be missing license header"
          fi
        done
    
    - name: "Install cargo-license for dependency checking"
      run: cargo install cargo-license
    
    - name: "Check dependency licenses"
      run: |
        cargo license --json > licenses.json
        echo "=== Dependency Licenses ==="
        cargo license
        echo "License compliance check completed"
    
    - name: "Upload license report"
      uses: actions/upload-artifact@v3
      with:
        name: license-report
        path: licenses.json