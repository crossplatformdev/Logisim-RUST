name: "Translation Checks"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  analyze_translations:
    name: "Check for translation file changes"
    runs-on: ubuntu-latest
    outputs:
      run_check: ${{ steps.filter.outputs.translations }}
    
    steps:
    - name: "Checkout sources"
      uses: actions/checkout@v5
    
    - name: "Look for changes in translation files"
      uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          translations:
            - '**/translations/**'
            - '**/locales/**'
            - '**/i18n/**'
            - '**/*.po'
            - '**/*.pot'
            - '**/*.ftl'  # Fluent localization files
    
    - name: "Will translation check step run?"
      run: |
        found="NO"
        [[ ${{ steps.filter.outputs.translations }} == 'true' ]] && found="YES"
        echo "run_check=${found}" >> $GITHUB_OUTPUT
        echo "Translation check step will run: ${found}"

  check_translations:
    name: "Translation File Checks"
    runs-on: ubuntu-latest
    needs: analyze_translations
    if: needs.analyze_translations.outputs.run_check == 'true'
    
    steps:
    - name: "Checkout sources"
      uses: actions/checkout@v5
    
    - name: "Install Rust toolchain"
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
    
    - name: "Check for translation consistency"
      run: |
        echo "Checking translation file consistency..."
        
        # Check if translation files exist
        if [ -d "translations" ] || [ -d "locales" ] || [ -d "i18n" ]; then
          echo "Translation directories found"
          find . -name "*.po" -o -name "*.pot" -o -name "*.ftl" | head -10
        else
          echo "No translation directories found - this is normal for early development"
          echo "When internationalization is needed, consider using rust-i18n or fluent-rs"
        fi
        
        # Basic validation if .po files exist
        if find . -name "*.po" | grep -q .; then
          echo "Found .po files, checking basic syntax..."
          # You could add msgfmt validation here
        fi
    
    - name: "Check for hardcoded strings (future i18n prep)"
      run: |
        echo "Scanning for potentially hardcoded user-facing strings..."
        # This is a basic check - in real i18n you'd use proper tools
        
        # Look for println! with string literals (basic check)
        if grep -r 'println!.*"[A-Z]' --include="*.rs" .; then
          echo "Found potential user-facing strings. Consider i18n when UI is added."
        else
          echo "No obvious hardcoded user-facing strings found."
        fi
      continue-on-error: true